'use babel';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _require = require("./async-spec-helpers");

var it = _require.it;
var fit = _require.fit;
var ffit = _require.ffit;
var fffit = _require.fffit;
var emitterEventPromise = _require.emitterEventPromise;
var beforeEach = _require.beforeEach;
var afterEach = _require.afterEach;
// eslint-disable-line

function dispatchCommand(commandName) {
  atom.commands.dispatch(atom.workspace.getElement(), commandName);
}

function ensurePaneLayout(layout) {
  var root = atom.workspace.getActivePane().getContainer().getRoot();
  expect(paneLayoutFor(root)).toEqual(layout);
}

function paneLayoutFor(root) {
  var layout = {};
  layout[root.getOrientation()] = root.getChildren().map(function (child) {
    switch (child.constructor.name) {
      case 'Pane':
        return child.getItems();
      case 'PaneAxis':
        return paneLayoutFor(child);
    }
  });
  return layout;
}

describe('pane manipulation commands', function () {
  beforeEach(function () {
    // `destroyEmptyPanes` is default true, but atom's spec-helper reset to `false`
    // So set it to `true` again here to test with default value.
    atom.config.set('core.destroyEmptyPanes', true);
    jasmine.attachToDOM(atom.workspace.getElement());

    return atom.packages.activatePackage('vim-mode-plus');
  });

  describe('moveToVery direction', function () {
    describe('all horizontal', function () {
      var e1 = undefined,
          e2 = undefined,
          e3 = undefined,
          p1 = undefined,
          p2 = undefined,
          p3 = undefined;
      beforeEach(_asyncToGenerator(function* () {
        e1 = yield atom.workspace.open('file1');
        e2 = yield atom.workspace.open('file2', { split: 'right' });
        e3 = yield atom.workspace.open('file3', { split: 'right' });
        var panes = atom.workspace.getCenter().getPanes();
        expect(panes).toHaveLength(3);
        var _panes = _slicedToArray(panes, 3);

        p1 = _panes[0];
        p2 = _panes[1];
        p3 = _panes[2];

        ensurePaneLayout({ horizontal: [[e1], [e2], [e3]] });
        expect(atom.workspace.getActivePane()).toBe(p3);
      }));

      describe('very-top', function () {
        it('case 1', function () {
          p1.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-top');
          ensurePaneLayout({ vertical: [[e1], { horizontal: [[e2], [e3]] }] });
        });
        it('case 2', function () {
          p2.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-top');
          ensurePaneLayout({ vertical: [[e2], { horizontal: [[e1], [e3]] }] });
        });
        it('case 3', function () {
          p3.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-top');
          ensurePaneLayout({ vertical: [[e3], { horizontal: [[e1], [e2]] }] });
        });
      });

      describe('very-bottom', function () {
        it('case 1', function () {
          p1.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-bottom');
          ensurePaneLayout({ vertical: [{ horizontal: [[e2], [e3]] }, [e1]] });
        });
        it('case 2', function () {
          p2.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-bottom');
          ensurePaneLayout({ vertical: [{ horizontal: [[e1], [e3]] }, [e2]] });
        });
        it('case 3', function () {
          p3.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-bottom');
          ensurePaneLayout({ vertical: [{ horizontal: [[e1], [e2]] }, [e3]] });
        });
      });

      describe('very-left', function () {
        it('case 1', function () {
          p1.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-left');
          ensurePaneLayout({ horizontal: [[e1], [e2], [e3]] });
        });
        it('case 2', function () {
          p2.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-left');
          ensurePaneLayout({ horizontal: [[e2], [e1], [e3]] });
        });
        it('case 3', function () {
          p3.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-left');
          ensurePaneLayout({ horizontal: [[e3], [e1], [e2]] });
        });
      });

      describe('very-right', function () {
        it('case 1', function () {
          p1.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-right');
          ensurePaneLayout({ horizontal: [[e2], [e3], [e1]] });
        });
        it('case 2', function () {
          p2.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-right');
          ensurePaneLayout({ horizontal: [[e1], [e3], [e2]] });
        });
        it('case 3', function () {
          p3.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-right');
          ensurePaneLayout({ horizontal: [[e1], [e2], [e3]] });
        });
      });

      describe('complex operation', function () {
        it('case 1', function () {
          p1.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-top');
          ensurePaneLayout({ vertical: [[e1], { horizontal: [[e2], [e3]] }] });
          dispatchCommand('vim-mode-plus:move-pane-to-very-left');
          ensurePaneLayout({ horizontal: [[e1], [e2], [e3]] });
          dispatchCommand('vim-mode-plus:move-pane-to-very-bottom');
          ensurePaneLayout({ vertical: [{ horizontal: [[e2], [e3]] }, [e1]] });
          dispatchCommand('vim-mode-plus:move-pane-to-very-right');
          ensurePaneLayout({ horizontal: [[e2], [e3], [e1]] });
        });
      });
    });

    describe('all vertical', function () {
      var e1 = undefined,
          e2 = undefined,
          e3 = undefined,
          p1 = undefined,
          p2 = undefined,
          p3 = undefined;
      beforeEach(_asyncToGenerator(function* () {
        e1 = yield atom.workspace.open('file1');
        e2 = yield atom.workspace.open('file2', { split: 'down' });
        e3 = yield atom.workspace.open('file3', { split: 'down' });
        var panes = atom.workspace.getCenter().getPanes();
        expect(panes).toHaveLength(3);
        var _panes2 = _slicedToArray(panes, 3);

        p1 = _panes2[0];
        p2 = _panes2[1];
        p3 = _panes2[2];

        ensurePaneLayout({ vertical: [[e1], [e2], [e3]] });
        expect(atom.workspace.getActivePane()).toBe(p3);
      }));

      describe('very-top', function () {
        it('case 1', function () {
          p1.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-top');
          ensurePaneLayout({ vertical: [[e1], [e2], [e3]] });
        });
        it('case 2', function () {
          p2.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-top');
          ensurePaneLayout({ vertical: [[e2], [e1], [e3]] });
        });
        it('case 3', function () {
          p3.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-top');
          ensurePaneLayout({ vertical: [[e3], [e1], [e2]] });
        });
      });

      describe('very-bottom', function () {
        it('case 1', function () {
          p1.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-bottom');
          ensurePaneLayout({ vertical: [[e2], [e3], [e1]] });
        });
        it('case 2', function () {
          p2.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-bottom');
          ensurePaneLayout({ vertical: [[e1], [e3], [e2]] });
        });
        it('case 3', function () {
          p3.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-bottom');
          ensurePaneLayout({ vertical: [[e1], [e2], [e3]] });
        });
      });

      describe('very-left', function () {
        it('case 1', function () {
          p1.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-left');
          ensurePaneLayout({ horizontal: [[e1], { vertical: [[e2], [e3]] }] });
        });
        it('case 2', function () {
          p2.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-left');
          ensurePaneLayout({ horizontal: [[e2], { vertical: [[e1], [e3]] }] });
        });
        it('case 3', function () {
          p3.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-left');
          ensurePaneLayout({ horizontal: [[e3], { vertical: [[e1], [e2]] }] });
        });
      });

      describe('very-right', function () {
        it('case 1', function () {
          p1.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-right');
          ensurePaneLayout({ horizontal: [{ vertical: [[e2], [e3]] }, [e1]] });
        });
        it('case 2', function () {
          p2.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-right');
          ensurePaneLayout({ horizontal: [{ vertical: [[e1], [e3]] }, [e2]] });
        });
        it('case 3', function () {
          p3.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-right');
          ensurePaneLayout({ horizontal: [{ vertical: [[e1], [e2]] }, [e3]] });
        });
      });

      describe('complex operation', function () {
        return it('case 1', function () {
          p1.activate();
          dispatchCommand('vim-mode-plus:move-pane-to-very-top');
          ensurePaneLayout({ vertical: [[e1], [e2], [e3]] });
          dispatchCommand('vim-mode-plus:move-pane-to-very-left');
          ensurePaneLayout({ horizontal: [[e1], { vertical: [[e2], [e3]] }] });
          dispatchCommand('vim-mode-plus:move-pane-to-very-bottom');
          ensurePaneLayout({ vertical: [[e2], [e3], [e1]] });
          dispatchCommand('vim-mode-plus:move-pane-to-very-right');
          ensurePaneLayout({ horizontal: [{ vertical: [[e2], [e3]] }, [e1]] });
        });
      });
    });
  });

  describe('exchange-pane', function () {
    var p1 = undefined,
        p2 = undefined,
        p3 = undefined,
        items = undefined;
    beforeEach(_asyncToGenerator(function* () {
      var e1 = yield atom.workspace.open('file1');
      var e2 = yield atom.workspace.open('file2', { split: 'right' });
      var e3 = yield atom.workspace.open('file3');
      var e4 = yield atom.workspace.open('file4', { split: 'down' });
      var panes = atom.workspace.getCenter().getPanes();
      expect(panes).toHaveLength(3);
      var _panes3 = _slicedToArray(panes, 3);

      p1 = _panes3[0];
      p2 = _panes3[1];
      p3 = _panes3[2];

      items = {
        p1: p1.getItems(),
        p2: p2.getItems(),
        p3: p3.getItems()
      };
      expect(items).toEqual({
        p1: [e1],
        p2: [e2, e3],
        p3: [e4]
      });

      ensurePaneLayout({ horizontal: [items.p1, { vertical: [items.p2, items.p3] }] });
      expect(atom.workspace.getActivePane()).toBe(p3);
    }));

    it('[adjacent is pane]: exchange pane and and stay active pane', function () {
      dispatchCommand('vim-mode-plus:exchange-pane');
      ensurePaneLayout({ horizontal: [items.p1, { vertical: [items.p3, items.p2] }] });
      expect(atom.workspace.getActivePane()).toBe(p2);

      dispatchCommand('vim-mode-plus:exchange-pane');
      ensurePaneLayout({ horizontal: [items.p1, { vertical: [items.p2, items.p3] }] });
      expect(atom.workspace.getActivePane()).toBe(p3);
    });

    it('[adjacent is paneAxis]: Do nothing when adjacent was paneAxis', function () {
      p1.activate();
      dispatchCommand('vim-mode-plus:exchange-pane');
      ensurePaneLayout({ horizontal: [items.p1, { vertical: [items.p2, items.p3] }] });
      expect(atom.workspace.getActivePane()).toBe(p1);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,