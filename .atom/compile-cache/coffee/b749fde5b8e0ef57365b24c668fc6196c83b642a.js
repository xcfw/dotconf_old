(function() {
  module.exports = {
    "c": ["source.c"],
    "cpp": ["source.cpp"],
    "cynlib": ["source.cpp"],
    "clojure": ["source.clojure"],
    "litcoffee": ["source.litcoffee"],
    "coffee": ["source.coffee"],
    "cs": ["source.cake", "source.csx", "source.cs"],
    "css": ["source.css"],
    "markdown": ["source.gfm"],
    "gitcommit": ["text.git-commit"],
    "gitconfig": ["source.git-config"],
    "gitrebase": ["text.git-rebase"],
    "go": ["source.go", "text.html.gohtml", "source.gotemplate"],
    "html": ["text.html.gohtml", "text.html.mustache", "text.html.php", "text.html.erb", "text.html.ruby", "text.html.basic"],
    "jsp": ["text.html.jsp"],
    "java": ["source.java"],
    "jproperties": ["source.java-properties"],
    "javascript": ["source.js"],
    "json": ["source.json"],
    "less": ["source.css.less"],
    "make": ["source.makefile"],
    "mustache": ["text.html.mustache", "source.sql.mustache"],
    "objc": ["source.objc"],
    "objcpp": ["source.objcpp"],
    "perl6": ["source.perl6"],
    "perl": ["source.perl"],
    "php": ["text.html.php"],
    "plist": ["source.plist", "text.xml.plist"],
    "python": ["source.python"],
    "eruby": ["text.html.erb", "text.html.ruby", "source.js.rails source.js.jquery"],
    "ruby": ["source.ruby.rails", "source.ruby.rails.rjs", "source.sql.ruby", "source.ruby"],
    "sass": ["source.sass"],
    "scss": ["source.css.scss"],
    "csh": ["source.shell"],
    "sh": ["source.shell"],
    "tcsh": ["source.shell"],
    "zsh": ["source.shell"],
    "sql": ["source.sql"],
    "text": ["text.plain"],
    "toml": ["source.toml"],
    "xml": ["text.xml"],
    "xslt": ["text.xml.xsl"],
    "yaml": ["source.yaml"],
    "smarty": ["text.html.smarty", "text.html.basic"]
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUveGNmLy5hdG9tL3BhY2thZ2VzL3ZpbS1tb2RlbGluZS9saWIvdmltLW1vZGVsaW5lLWZpbGV0eXBlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7SUFBQSxHQUFBLEVBQUssQ0FDSCxVQURHLENBQUw7SUFHQSxLQUFBLEVBQU8sQ0FDTCxZQURLLENBSFA7SUFNQSxRQUFBLEVBQVUsQ0FDUixZQURRLENBTlY7SUFTQSxTQUFBLEVBQVcsQ0FDVCxnQkFEUyxDQVRYO0lBWUEsV0FBQSxFQUFhLENBQ1gsa0JBRFcsQ0FaYjtJQWVBLFFBQUEsRUFBVSxDQUNSLGVBRFEsQ0FmVjtJQWtCQSxJQUFBLEVBQU0sQ0FDSixhQURJLEVBRUosWUFGSSxFQUdKLFdBSEksQ0FsQk47SUF1QkEsS0FBQSxFQUFPLENBQ0wsWUFESyxDQXZCUDtJQTBCQSxVQUFBLEVBQVksQ0FDVixZQURVLENBMUJaO0lBNkJBLFdBQUEsRUFBYSxDQUNYLGlCQURXLENBN0JiO0lBZ0NBLFdBQUEsRUFBYSxDQUNYLG1CQURXLENBaENiO0lBbUNBLFdBQUEsRUFBYSxDQUNYLGlCQURXLENBbkNiO0lBc0NBLElBQUEsRUFBTSxDQUNKLFdBREksRUFFSixrQkFGSSxFQUdKLG1CQUhJLENBdENOO0lBMkNBLE1BQUEsRUFBUSxDQUNOLGtCQURNLEVBRU4sb0JBRk0sRUFHTixlQUhNLEVBSU4sZUFKTSxFQUtOLGdCQUxNLEVBTU4saUJBTk0sQ0EzQ1I7SUFtREEsS0FBQSxFQUFPLENBQ0wsZUFESyxDQW5EUDtJQXNEQSxNQUFBLEVBQVEsQ0FDTixhQURNLENBdERSO0lBeURBLGFBQUEsRUFBZSxDQUNiLHdCQURhLENBekRmO0lBNERBLFlBQUEsRUFBYyxDQUNaLFdBRFksQ0E1RGQ7SUErREEsTUFBQSxFQUFRLENBQ04sYUFETSxDQS9EUjtJQWtFQSxNQUFBLEVBQVEsQ0FDTixpQkFETSxDQWxFUjtJQXFFQSxNQUFBLEVBQVEsQ0FDTixpQkFETSxDQXJFUjtJQXdFQSxVQUFBLEVBQVksQ0FDVixvQkFEVSxFQUVWLHFCQUZVLENBeEVaO0lBNEVBLE1BQUEsRUFBUSxDQUNOLGFBRE0sQ0E1RVI7SUErRUEsUUFBQSxFQUFVLENBQ1IsZUFEUSxDQS9FVjtJQWtGQSxPQUFBLEVBQVMsQ0FDUCxjQURPLENBbEZUO0lBcUZBLE1BQUEsRUFBUSxDQUNOLGFBRE0sQ0FyRlI7SUF3RkEsS0FBQSxFQUFPLENBQ0wsZUFESyxDQXhGUDtJQTJGQSxPQUFBLEVBQVMsQ0FDUCxjQURPLEVBRVAsZ0JBRk8sQ0EzRlQ7SUErRkEsUUFBQSxFQUFVLENBQ1IsZUFEUSxDQS9GVjtJQWtHQSxPQUFBLEVBQVMsQ0FDUCxlQURPLEVBRVAsZ0JBRk8sRUFHUCxrQ0FITyxDQWxHVDtJQXVHQSxNQUFBLEVBQVEsQ0FDTixtQkFETSxFQUVOLHVCQUZNLEVBR04saUJBSE0sRUFJTixhQUpNLENBdkdSO0lBNkdBLE1BQUEsRUFBUSxDQUNOLGFBRE0sQ0E3R1I7SUFnSEEsTUFBQSxFQUFRLENBQ04saUJBRE0sQ0FoSFI7SUFtSEEsS0FBQSxFQUFPLENBQ0wsY0FESyxDQW5IUDtJQXNIQSxJQUFBLEVBQU0sQ0FDSixjQURJLENBdEhOO0lBeUhBLE1BQUEsRUFBUSxDQUNOLGNBRE0sQ0F6SFI7SUE0SEEsS0FBQSxFQUFPLENBQ0wsY0FESyxDQTVIUDtJQStIQSxLQUFBLEVBQU8sQ0FDTCxZQURLLENBL0hQO0lBa0lBLE1BQUEsRUFBUSxDQUNOLFlBRE0sQ0FsSVI7SUFxSUEsTUFBQSxFQUFRLENBQ04sYUFETSxDQXJJUjtJQXdJQSxLQUFBLEVBQU8sQ0FDTCxVQURLLENBeElQO0lBMklBLE1BQUEsRUFBUSxDQUNOLGNBRE0sQ0EzSVI7SUE4SUEsTUFBQSxFQUFRLENBQ04sYUFETSxDQTlJUjtJQWlKQSxRQUFBLEVBQVUsQ0FDUixrQkFEUSxFQUVSLGlCQUZRLENBakpWOztBQURGIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPVxuICBcImNcIjogW1xuICAgIFwic291cmNlLmNcIlxuICBdXG4gIFwiY3BwXCI6IFtcbiAgICBcInNvdXJjZS5jcHBcIlxuICBdXG4gIFwiY3lubGliXCI6IFtcbiAgICBcInNvdXJjZS5jcHBcIlxuICBdXG4gIFwiY2xvanVyZVwiOiBbXG4gICAgXCJzb3VyY2UuY2xvanVyZVwiXG4gIF1cbiAgXCJsaXRjb2ZmZWVcIjogW1xuICAgIFwic291cmNlLmxpdGNvZmZlZVwiXG4gIF1cbiAgXCJjb2ZmZWVcIjogW1xuICAgIFwic291cmNlLmNvZmZlZVwiXG4gIF1cbiAgXCJjc1wiOiBbXG4gICAgXCJzb3VyY2UuY2FrZVwiXG4gICAgXCJzb3VyY2UuY3N4XCJcbiAgICBcInNvdXJjZS5jc1wiXG4gIF1cbiAgXCJjc3NcIjogW1xuICAgIFwic291cmNlLmNzc1wiXG4gIF1cbiAgXCJtYXJrZG93blwiOiBbXG4gICAgXCJzb3VyY2UuZ2ZtXCJcbiAgXVxuICBcImdpdGNvbW1pdFwiOiBbXG4gICAgXCJ0ZXh0LmdpdC1jb21taXRcIlxuICBdXG4gIFwiZ2l0Y29uZmlnXCI6IFtcbiAgICBcInNvdXJjZS5naXQtY29uZmlnXCJcbiAgXVxuICBcImdpdHJlYmFzZVwiOiBbXG4gICAgXCJ0ZXh0LmdpdC1yZWJhc2VcIlxuICBdXG4gIFwiZ29cIjogW1xuICAgIFwic291cmNlLmdvXCJcbiAgICBcInRleHQuaHRtbC5nb2h0bWxcIlxuICAgIFwic291cmNlLmdvdGVtcGxhdGVcIlxuICBdXG4gIFwiaHRtbFwiOiBbXG4gICAgXCJ0ZXh0Lmh0bWwuZ29odG1sXCJcbiAgICBcInRleHQuaHRtbC5tdXN0YWNoZVwiXG4gICAgXCJ0ZXh0Lmh0bWwucGhwXCJcbiAgICBcInRleHQuaHRtbC5lcmJcIlxuICAgIFwidGV4dC5odG1sLnJ1YnlcIlxuICAgIFwidGV4dC5odG1sLmJhc2ljXCJcbiAgXVxuICBcImpzcFwiOiBbXG4gICAgXCJ0ZXh0Lmh0bWwuanNwXCJcbiAgXVxuICBcImphdmFcIjogW1xuICAgIFwic291cmNlLmphdmFcIlxuICBdXG4gIFwianByb3BlcnRpZXNcIjogW1xuICAgIFwic291cmNlLmphdmEtcHJvcGVydGllc1wiXG4gIF1cbiAgXCJqYXZhc2NyaXB0XCI6IFtcbiAgICBcInNvdXJjZS5qc1wiXG4gIF1cbiAgXCJqc29uXCI6IFtcbiAgICBcInNvdXJjZS5qc29uXCJcbiAgXVxuICBcImxlc3NcIjogW1xuICAgIFwic291cmNlLmNzcy5sZXNzXCJcbiAgXVxuICBcIm1ha2VcIjogW1xuICAgIFwic291cmNlLm1ha2VmaWxlXCJcbiAgXVxuICBcIm11c3RhY2hlXCI6IFtcbiAgICBcInRleHQuaHRtbC5tdXN0YWNoZVwiXG4gICAgXCJzb3VyY2Uuc3FsLm11c3RhY2hlXCJcbiAgXVxuICBcIm9iamNcIjogW1xuICAgIFwic291cmNlLm9iamNcIlxuICBdXG4gIFwib2JqY3BwXCI6IFtcbiAgICBcInNvdXJjZS5vYmpjcHBcIlxuICBdXG4gIFwicGVybDZcIjogW1xuICAgIFwic291cmNlLnBlcmw2XCJcbiAgXVxuICBcInBlcmxcIjogW1xuICAgIFwic291cmNlLnBlcmxcIlxuICBdXG4gIFwicGhwXCI6IFtcbiAgICBcInRleHQuaHRtbC5waHBcIlxuICBdXG4gIFwicGxpc3RcIjogW1xuICAgIFwic291cmNlLnBsaXN0XCJcbiAgICBcInRleHQueG1sLnBsaXN0XCJcbiAgXVxuICBcInB5dGhvblwiOiBbXG4gICAgXCJzb3VyY2UucHl0aG9uXCJcbiAgXVxuICBcImVydWJ5XCI6IFtcbiAgICBcInRleHQuaHRtbC5lcmJcIlxuICAgIFwidGV4dC5odG1sLnJ1YnlcIlxuICAgIFwic291cmNlLmpzLnJhaWxzIHNvdXJjZS5qcy5qcXVlcnlcIlxuICBdXG4gIFwicnVieVwiOiBbXG4gICAgXCJzb3VyY2UucnVieS5yYWlsc1wiXG4gICAgXCJzb3VyY2UucnVieS5yYWlscy5yanNcIlxuICAgIFwic291cmNlLnNxbC5ydWJ5XCJcbiAgICBcInNvdXJjZS5ydWJ5XCJcbiAgXVxuICBcInNhc3NcIjogW1xuICAgIFwic291cmNlLnNhc3NcIlxuICBdXG4gIFwic2Nzc1wiOiBbXG4gICAgXCJzb3VyY2UuY3NzLnNjc3NcIlxuICBdXG4gIFwiY3NoXCI6IFtcbiAgICBcInNvdXJjZS5zaGVsbFwiXG4gIF1cbiAgXCJzaFwiOiBbXG4gICAgXCJzb3VyY2Uuc2hlbGxcIlxuICBdXG4gIFwidGNzaFwiOiBbXG4gICAgXCJzb3VyY2Uuc2hlbGxcIlxuICBdXG4gIFwienNoXCI6IFtcbiAgICBcInNvdXJjZS5zaGVsbFwiXG4gIF1cbiAgXCJzcWxcIjogW1xuICAgIFwic291cmNlLnNxbFwiXG4gIF1cbiAgXCJ0ZXh0XCI6IFtcbiAgICBcInRleHQucGxhaW5cIlxuICBdXG4gIFwidG9tbFwiOiBbXG4gICAgXCJzb3VyY2UudG9tbFwiXG4gIF1cbiAgXCJ4bWxcIjogW1xuICAgIFwidGV4dC54bWxcIlxuICBdXG4gIFwieHNsdFwiOiBbXG4gICAgXCJ0ZXh0LnhtbC54c2xcIlxuICBdXG4gIFwieWFtbFwiOiBbXG4gICAgXCJzb3VyY2UueWFtbFwiXG4gIF1cbiAgXCJzbWFydHlcIjogW1xuICAgIFwidGV4dC5odG1sLnNtYXJ0eVwiXG4gICAgXCJ0ZXh0Lmh0bWwuYmFzaWNcIlxuICBdXG4iXX0=
